/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2022-05-03 22:49:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.DoctorLogin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.sql.DriverManager;
import java.sql.Connection;
import business.*;

public final class records_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("jar:file:/C:/Users/eVmPr/Documents/IS240/JODEA_Project/VacTrackSys/build/web/WEB-INF/lib/jstl-impl.jar!/META-INF/fmt.tld", Long.valueOf(1343837818000L));
    _jspx_dependants.put("jar:file:/C:/Users/eVmPr/Documents/IS240/JODEA_Project/VacTrackSys/build/web/WEB-INF/lib/jstl-impl.jar!/META-INF/x.tld", Long.valueOf(1343837818000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-impl.jar", Long.valueOf(1651618131646L));
    _jspx_dependants.put("jar:file:/C:/Users/eVmPr/Documents/IS240/JODEA_Project/VacTrackSys/build/web/WEB-INF/lib/jstl-impl.jar!/META-INF/c.tld", Long.valueOf(1343837818000L));
    _jspx_dependants.put("jar:file:/C:/Users/eVmPr/Documents/IS240/JODEA_Project/VacTrackSys/build/web/WEB-INF/lib/jstl-impl.jar!/META-INF/sql.tld", Long.valueOf(1343837818000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("business");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"formstyle.css\" type=\"text/css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"../css/all.css\" type=\"text/css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n");
      out.write("        <link rel=\"icon\" type=\"image/x-icon\" href=\"../image/favicon_16x16.png\">\n");
      out.write("\n");
      out.write("        <title>Records</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

     
        
      out.write("\n");
      out.write("        <div class=\"container\" id=\"rs-form\">\n");
      out.write("            <div class=\"title\">Results</div>\n");
      out.write("            <!--<button onclick=\"\"></button>-->\n");
      out.write("            <div class=\"content\" id=\"rs-content\">\n");
      out.write("\n");
      out.write("\n");
      out.write("                ");

                    String sql = "", ssn, fname, minit, lname, vac_date = "", dob = "", ptype = "";
                    String[] fields = {"Social_Security", "First_Name", "Middle_Init", "Last_Name", "DOB", "P_Type"};
                    String[] filters = new String[6];
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    ServletContext context = getServletContext();
                    String ur = context.getRealPath("/Team_JODEA1.accdb");
                    Connection conn = DriverManager.getConnection("jdbc:ucanaccess://" + ur);
                    String[] info = {ssn = "", fname = "", minit = "", lname = "", dob = "", ptype = ""};
                    //            ArrayList<Patient> patientset = new ArrayList<>();
                    ArrayList<String> newVal = new ArrayList<>();
                    ArrayList<Patient> pa;
                    info[0] = String.valueOf(request.getParameter("ssn"));
                    info[1] = String.valueOf(request.getParameter("fname"));
                    info[2] = String.valueOf(request.getParameter("lname"));
                    info[3] = String.valueOf(request.getParameter("midinit"));
                    info[4] = String.valueOf(request.getParameter("dob"));
                    info[5] = String.valueOf(request.getParameter("pat_type"));

                    int isE = 0;
                    String newV = "";
                    for (int i = 0; i < info.length - 1; i++) {
                        if (info[i].isEmpty() || info[i].equals("") || info[i].equals("null")) {
                            info[i] = "N/A";
                            isE++;
                            filters[i] = info[i];
                        } else {
                            // adds a new condition clause for WHERE clause
                            if (fields[i].equals("Social_Security")) {
                                String[] ssn2 = info[i].split("-");
                            if (ssn2[0].equals("000")){
                              
                            }
                            if (ssn2[1].equals("00")){
                                
                            }if (ssn2[2].equals("0000")){
                                
                            }
                            newV = fields[i] + "=" + ssn2[0]+ssn2[1]+ssn2[2];
//                                String[] nums = info[i].split("-");
//                                newV = fields[i] + "=" + info[i];
                                filters[i] = newV; //String.valueOf(newV);

                            } else if (fields[i].equals("DOB")) {
                                //format date
                                DateTimeFormatter dob_format = DateTimeFormatter.ofPattern("dd-MMM-yy");
                                newV = fields[i] + "='" + String.valueOf(dob_format.format(LocalDate.parse(info[i]))) + "'";
                                filters[i] = newV;//
                            } else {
                                newV = fields[i] + "='" + info[i] + "'";
                                filters[i] = String.valueOf(newV);
                            }
                            newVal.add(filters[i]);// add value to array list

                        }
                    }
                    sql = "SELECT * FROM PATIENTS";//SELECT 
                    //                        + " WHERE Social_Security='" + ssn + "';";
                    String sqlw = " WHERE ";
                    newVal.remove("");
                    newVal.remove("null");
                    // Create a new Array from ArrayList
                    String[] rs = newVal.toArray(new String[newVal.size()]);
                    String val = "";
                    if (rs.length == 1) {
                        val = rs[0];
                        sqlw += val;
                    } else {//Add 'AND' if more than one condition
                        for (int i = 0; i < rs.length; i++) {
                            if (!rs[i].equalsIgnoreCase("N/A") && !rs[i].equalsIgnoreCase("null")
                                    && !rs[i].equalsIgnoreCase(null)) {
                                val = rs[i];
                                //                                System.out.println("value = " + val);

                                if (i < rs.length - 1 && !rs[i].equalsIgnoreCase("N/A")) {//&& !filters[i].equalsIgnoreCase("N/A")
                                    sqlw += val + " AND ";//Adds 'AND' in between each condition 
                                } else {
                                    sqlw += val;
                                }
                            }
                        }
                    }
                    //add sqlw to sql variable
                    sql += sqlw;// + ";";
                    Statement s = conn.createStatement();
                    ResultSet r = s.executeQuery(sql);
                
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                ");
    if (r.next()) {
                        String s1 = String.valueOf(r.getInt("Social_Security"));
                        String ssn2 = "***-**-" + s1.substring(5, s1.length() - 1);

                
      out.write("\n");
      out.write("                <table border=\"1\">\n");
      out.write("                    <thead>\n");
      out.write("                    <th>Social Security Number (SSN)</th>\n");
      out.write("                    <th>First Name</th>\n");
      out.write("                    <th>Middle Initial</th>\n");
      out.write("                    <th>Last Name</th>\n");
      out.write("                    <th>Date of Birth</th>\n");
      out.write("                    <th>Patient Type</th>\n");
      out.write("                    </thead>\n");
      out.write("                    <tbody>\n");
      out.write("                    <td>");
      out.print( ssn2);
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("First_Name"));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("Middle_Init"));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("Last_Name"));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( String.valueOf(r.getDate("DOB")));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("P_Type"));
      out.write("</td>\n");
      out.write("                    ");
while (r.next()) {
                            s1 = String.valueOf(r.getInt("Social_Security"));
                            ssn2 = "***-**" + s1.substring(5, s1.length() - 1);

                    
      out.write("\n");
      out.write("\n");
      out.write("                    <td>");
      out.print( ssn2);
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("First_Name"));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("Middle_Init"));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("Last_Name"));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( String.valueOf(r.getDate("DOB")));
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getString("P_Type"));
      out.write("</td>\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("                ");
 }
                } else {
                
      out.write("<p>Could not find the request record.</p>\n");
      out.write("                ");

                    }
                    r.close();
                    s.close();
                
      out.write("\n");
      out.write("                \n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
